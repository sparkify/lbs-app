{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/shared/services/livy.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAyC;AACc;;;AAGvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAMnB,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgD;AACkB;;;;;AAU3D,MAAM,YAAY;IAWrB,YAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAPpC,UAAK,GAAG,iBAAiB,CAAC;QAQ9B,IAAI,CAAC,aAAa,GAAG,IAAI,wDAAS,CAAC;YAC/B,WAAW,EAAE,IAAI,0DAAW,CAAC,GAAG,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACtD,YAAY,EAAE,IAAI,0DAAW,CAAC,GAAG,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACvD,EAAE,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC/C,CAAC,CAAC;IACP,CAAC;IAXD,qBAAqB;IACd,MAAM,CAAC,WAAW,CAAC,GAAQ;QAC9B,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAChF,CAAC;IAUM,QAAQ;QACX,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC;IACxC,CAAC;IAEM,eAAe,CAAC,SAAiB;QACpC,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC,SAAS,CAC5C,CAAC,SAAS,EAAE,EAAE;YACV,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC1E,IAAI,KAAK,KAAK,MAAM,EAAE;oBAClB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;wBACxF,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;4BACzG,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;wBACnD,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;iBACN;qBAAM,IAAI,KAAK,KAAK,MAAM,EAAE;oBACzB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBACtB;qBAAM;oBACH,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBACtB;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CACJ,CAAC;IACN,CAAC;IAEM,QAAQ;QACX,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC;QACpC,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;QACxC,MAAM,WAAW,GAAG,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;QACjD,MAAM,YAAY,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC;QACnD,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAG;YAC9C,MAAM,SAAS,GAAG,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,YAAY,CAAC;YAClE,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;SACnC;aAAM;YACH,IAAI,CAAC,MAAM,GAAG,0CAA0C,CAAC;SAC5D;IACL,CAAC;;wEAtDQ,YAAY;4FAAZ,YAAY;QCXzB,0EACI;QAD8B,wIAAY,cAAU,IAAC;QACrD,wEACI;QAAA,0EACA;QAAA,sEACJ;QAAA,4DAAQ;QACR,gEACA;QAAA,wEACI;QAAA,2EACA;QAAA,sEACJ;QAAA,4DAAQ;QACR,gEACA;QAAA,2EAAiB;QAAA,uEAAU;QAAA,4DAAQ;QACnC,6EACI;QAAA,6EAAkB;QAAA,6DAAC;QAAA,4DAAS;QAC5B,6EAAkB;QAAA,6DAAC;QAAA,4DAAS;QAC5B,6EAAkB;QAAA,6DAAC;QAAA,4DAAS;QAC5B,6EAAkB;QAAA,6DAAC;QAAA,4DAAS;QAChC,4DAAS;QACT,iEACA;QAAA,6EAAwD;QAAA,kEAAM;QAAA,4DAAS;QAC3E,4DAAO;QACP,iEACA;QAAA,wDACA;QAAA,4EAA+B;;QAvBzB,wFAA2B;QAmBP,2DAAiC;QAAjC,8FAAiC;QAG3D,0DACA;QADA,wFACA;;6FDZa,YAAY;cALxB,uDAAS;eAAC;gBACP,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACrC;;;;;;;;;;;;;;AEVD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsD;AACf;AACY;AACK;AACF;AACT;;AAgBtC,MAAM,SAAS;;wFAAT,SAAS,cAFN,2DAAY;4IAEf,SAAS,mBAHP,EAAE,YANJ;YACL,oEAAgB;YAChB,uEAAa;YACb,qEAAgB;YAChB,kEAAmB;SACtB;mIAIQ,SAAS,mBAXd,2DAAY,aAGZ,oEAAgB;QAChB,uEAAa;QACb,qEAAgB;QAChB,kEAAmB;6FAKd,SAAS;cAbrB,sDAAQ;eAAC;gBACN,YAAY,EAAE;oBACV,2DAAY;iBACf;gBACD,OAAO,EAAE;oBACL,oEAAgB;oBAChB,uEAAa;oBACb,qEAAgB;oBAChB,kEAAmB;iBACtB;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC5B;;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;AACpB;AAEd;AACmC;AAEA;;;AAE9D,MAAM,YAAY,GAAG,IAAI,gEAAW,CAAC,EAAC,cAAc,EAAE,iCAAiC,EAAC,CAAC,CAAC;AAC1F,MAAM,gBAAgB,GAAG,qEAAW,CAAC,GAAG,GAAG,OAAO,CAAC;AAK5C,MAAM,WAAW;IAYpB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAT3B,0BAAqB,GAAG,kBAAkB,CAAC;QAC3C,iBAAY,GAAG,mBAAmB,CAAC;QACnC,sBAAiB,GAAG,mBAAmB,CAAC;QACxC,2BAAsB,GAAG,sBAAsB,CAAC;IAMlB,CAAC;IAJhC,MAAM,CAAC,cAAc,CAAC,KAAa;QACvC,OAAO,gBAAgB,GAAG,IAAI,KAAK,EAAE,CAAC;IAC1C,CAAC;IAIM,mBAAmB;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE,EAAE,EAC5E,EAAC,OAAO,EAAE,YAAY,EAAC,CAAC,CAAC;IACjC,CAAC;IAEM,gBAAgB,CAAC,SAAS;QAC7B,MAAM,IAAI,GAAG,EAAC,SAAS,EAAC,CAAC;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,CAAC,CAAC,IAAI,CACpG,0DAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACV,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7B,IAAI,KAAK,KAAK,UAAU,EAAE;gBACtB,MAAM,KAAK,CAAC;aACf;YACD,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC,EACF,gEAAS,CAAC,MAAM,CAAC,EAAE,CACf,MAAM,CAAC,IAAI,CACP,0DAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,CAAE,4CAA4C;QACxE,CAAC,CAAC,EAAE,gEAAS,CAAC,GAAG,EAAE,CAAC,kDAAK,CAAC,GAAG,CAAC,CAAC,CAClC,CACJ,CACJ,CAAC;IACN,CAAC;IAEM,kBAAkB,CAAC,SAAS,EAAE,WAAW;QAC5C,MAAM,IAAI,GAAG,EAAC,SAAS,EAAE,WAAW,EAAC,CAAC;QACtC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,sBAAsB,CAAC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,CAAC,CAAC,IAAI,CAC9G,0DAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACV,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;gBACrB,MAAM,KAAK,CAAC;aACf;YACD,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC,EACF,gEAAS,CAAC,MAAM,CAAC,EAAE,CACf,MAAM,CAAC,IAAI,CACP,0DAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACV,4CAA4C;QAChD,CAAC,CAAC,EAAE,gEAAS,CAAC,GAAG,EAAE,CAAC,kDAAK,CAAC,EAAE,CAAC,CAAC,CACjC,CACJ,CACJ,CAAC;IACN,CAAC;IAEM,aAAa,CAAC,SAAiB,EAAE,SAAiB;QACrD,MAAM,IAAI,GAAG,EAAC,SAAS,EAAE,SAAS,EAAC,CAAC;QACpC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,YAAY,EAAC,CAAC,CAAC;IAC7G,CAAC;;sEA7DQ,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFR,MAAM;6FAET,WAAW;cAHvB,wDAAU;eAAC;gBACR,UAAU,EAAE,MAAM;aACrB;;;;;;;;;;;;;;ACbD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACvB,GAAG,EAAE,2BAA2B;IAChC,UAAU,EAAE,KAAK;CACpB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;AChBnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\nimport {LivyService} from './shared/services/livy.service';\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n    public operationForm: FormGroup;\n    public result: string;\n    private title = 'LBS Application';\n\n    // TODO result object\n    public static parseResult(obj: any): any {\n        return obj[`output`][`data`][`text/plain`].split('= ')[1].replace('\\n', '');\n    }\n\n    constructor(private livyService: LivyService) {\n        this.operationForm = new FormGroup({\n            firstNumber: new FormControl('1', Validators.required),\n            secondNumber: new FormControl('1', Validators.required),\n            op: new FormControl('', Validators.required),\n        });\n    }\n\n    public ngOnInit(): void {\n        this.result = 'Submit operation...';\n    }\n\n    public callLivyService(statement: string): void {\n        this.livyService.initiateLivySession().subscribe(\n            (sessionID) => {\n                this.livyService.pollLivyTillIdle(sessionID[`sessionID`]).subscribe((state) => {\n                    if (state === 'idle') {\n                        this.livyService.postStatement(sessionID[`sessionID`], statement).subscribe((statementID) => {\n                            this.livyService.pollLivyTillResult(sessionID[`sessionID`], statementID[`statementID`]).subscribe((result) => {\n                                this.result = AppComponent.parseResult(result);\n                            });\n                        });\n                    } else if (state === 'dead') {\n                        console.log('500');\n                    } else {\n                        console.log('500');\n                    }\n                });\n            }\n        );\n    }\n\n    public onSubmit(): void {\n        this.result = 'Fetching results...';\n        const obj = this.operationForm.controls;\n        const firstNumber = +obj[`firstNumber`][`value`];\n        const secondNumber = +obj[`secondNumber`][`value`];\n        if (!isNaN(firstNumber) && !isNaN(secondNumber) ) {\n            const operation = firstNumber + obj[`op`][`value`] + secondNumber;\n            this.callLivyService(operation);\n        } else {\n            this.result = 'Both Fields should contain only numbers.';\n        }\n    }\n\n}\n","<form [formGroup]=\"operationForm\" (ngSubmit)=\"onSubmit()\">\n    <label>\n        First Number:\n        <input type=\"text\" formControlName=\"firstNumber\">\n    </label>\n    <br/>\n    <label>\n        Second Number:\n        <input type=\"text\" formControlName=\"secondNumber\">\n    </label>\n    <br/>\n    <label for=\"op\"> Operation </label>\n    <select formControlName=\"op\" id=\"op\" name=\"op\">\n        <option value=\"+\">+</option>\n        <option value=\"-\">-</option>\n        <option value=\"*\">*</option>\n        <option value=\"/\">/</option>\n    </select>\n    <br/>\n    <button type=\"submit\" [disabled]=\"!operationForm.valid\">Submit</button>\n</form>\n<br/>\n{{ result }}\n<router-outlet></router-outlet>\n","import {HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\n\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        AppRoutingModule,\n        BrowserModule,\n        HttpClientModule,\n        ReactiveFormsModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\n\nimport {timer} from 'rxjs';\nimport {delayWhen, map, retryWhen, tap} from 'rxjs/operators';\n\nimport {environment} from '../../../environments/environment';\n\nconst HTTP_HEADERS = new HttpHeaders({'Content-Type': 'application/json; charset=utf-8'});\nconst MAIN_REQUEST_URL = environment.API + '/livy';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LivyService {\n\n    public livyState;\n    readonly sessionInitiationPath = 'initiate-session';\n    readonly sessionState = 'get-session-state';\n    readonly sendStatementPath = 'execute-statement';\n    readonly getStatementResultPath = 'get-statement-result';\n\n    private static formRequestURL(local: string): string {\n        return MAIN_REQUEST_URL + `/${local}`;\n    }\n\n    constructor(private http: HttpClient) {}\n\n    public initiateLivySession() {\n        return this.http.post(LivyService.formRequestURL(this.sessionInitiationPath), {},\n            {headers: HTTP_HEADERS});\n    }\n\n    public pollLivyTillIdle(sessionID) {\n        const body = {sessionID};\n        return this.http.post(LivyService.formRequestURL(this.sessionState), body, {headers: HTTP_HEADERS}).pipe(\n            map((state) => {\n                const value = state[`state`];\n                if (value === 'starting') {\n                    throw value;\n                }\n                return value;\n            }),\n            retryWhen(errors =>\n                errors.pipe(\n                    tap((val) => {\n                        console.log(`${val}`);  // TODO: Update state and assign value to it\n                    }), delayWhen(() => timer(500))\n                )\n            )\n        );\n    }\n\n    public pollLivyTillResult(sessionID, statementID) {\n        const body = {sessionID, statementID};\n        return this.http.post(LivyService.formRequestURL(this.getStatementResultPath), body, {headers: HTTP_HEADERS}).pipe(\n            map((state) => {\n                if (!state[`completed`]) {\n                    throw state;\n                }\n                return state;\n            }),\n            retryWhen(errors =>\n                errors.pipe(\n                    tap((value) => {\n                        // TODO: Update state and assign value to it\n                    }), delayWhen(() => timer(50))\n                )\n            )\n        );\n    }\n\n    public postStatement(sessionID: string, statement: string): any {\n        const body = {statement, sessionID};\n        return this.http.post(LivyService.formRequestURL(this.sendStatementPath), body, {headers: HTTP_HEADERS});\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    API: 'http://localhost:4000/api',\n    production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}