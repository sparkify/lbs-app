{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/shared/services/livy.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","livyService","title","operationForm","firstNumber","required","secondNumber","op","result","statement","initiateLivySession","subscribe","sessionID","pollLivyTillIdle","state","postStatement","statementID","pollLivyTillResult","parseResult","console","log","obj","controls","isNaN","operation","callLivyService","split","replace","onSubmit","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","HTTP_HEADERS","MAIN_REQUEST_URL","API","LivyService","http","sessionInitiationPath","sessionState","sendStatementPath","getStatementResultPath","post","formRequestURL","headers","body","pipe","value","errors","val","local","providedIn","environment","production","bootstrapModule","catch","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\nimport {LivyService} from './shared/services/livy.service';\n\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n    public operationForm: FormGroup;\n    public result: string;\n    private title = 'LBS Application';\n\n    // TODO result object\n    public static parseResult(obj: any): any {\n        return obj[`output`][`data`][`text/plain`].split('= ')[1].replace('\\n', '');\n    }\n\n    constructor(private livyService: LivyService) {\n        this.operationForm = new FormGroup({\n            firstNumber: new FormControl('1', Validators.required),\n            secondNumber: new FormControl('1', Validators.required),\n            op: new FormControl('', Validators.required),\n        });\n    }\n\n    public ngOnInit(): void {\n        this.result = 'Submit operation...';\n    }\n\n    public callLivyService(statement: string): void {\n        this.livyService.initiateLivySession().subscribe(\n            (sessionID) => {\n                this.livyService.pollLivyTillIdle(sessionID[`sessionID`]).subscribe((state) => {\n                    if (state === 'idle') {\n                        this.livyService.postStatement(sessionID[`sessionID`], statement).subscribe((statementID) => {\n                            this.livyService.pollLivyTillResult(sessionID[`sessionID`], statementID[`statementID`]).subscribe((result) => {\n                                this.result = AppComponent.parseResult(result);\n                            });\n                        });\n                    } else if (state === 'dead') {\n                        console.log('500');\n                    } else {\n                        console.log('500');\n                    }\n                });\n            }\n        );\n    }\n\n    public onSubmit(): void {\n        this.result = 'Fetching results...';\n        const obj = this.operationForm.controls;\n        const firstNumber = +obj[`firstNumber`][`value`];\n        const secondNumber = +obj[`secondNumber`][`value`];\n        if (!isNaN(firstNumber) && !isNaN(secondNumber) ) {\n            const operation = firstNumber + obj[`op`][`value`] + secondNumber;\n            this.callLivyService(operation);\n        } else {\n            this.result = 'Both Fields should contain only numbers.';\n        }\n    }\n\n}\n","<form [formGroup]=\"operationForm\" (ngSubmit)=\"onSubmit()\">\n    <label>\n        First Number:\n        <input type=\"text\" formControlName=\"firstNumber\">\n    </label>\n    <br/>\n    <label>\n        Second Number:\n        <input type=\"text\" formControlName=\"secondNumber\">\n    </label>\n    <br/>\n    <label for=\"op\"> Operation </label>\n    <select formControlName=\"op\" id=\"op\" name=\"op\">\n        <option value=\"+\">+</option>\n        <option value=\"-\">-</option>\n        <option value=\"*\">*</option>\n        <option value=\"/\">/</option>\n    </select>\n    <br/>\n    <button type=\"submit\" [disabled]=\"!operationForm.valid\">Submit</button>\n</form>\n<br/>\n{{ result }}\n<router-outlet></router-outlet>\n","import {HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\n\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        AppRoutingModule,\n        BrowserModule,\n        HttpClientModule,\n        ReactiveFormsModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\n\nimport {timer} from 'rxjs';\nimport {delayWhen, map, retryWhen, tap} from 'rxjs/operators';\n\nimport {environment} from '../../../environments/environment';\n\nconst HTTP_HEADERS = new HttpHeaders({'Content-Type': 'application/json; charset=utf-8'});\nconst MAIN_REQUEST_URL = environment.API + '/livy';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LivyService {\n\n    public livyState;\n    readonly sessionInitiationPath = 'initiate-session';\n    readonly sessionState = 'get-session-state';\n    readonly sendStatementPath = 'execute-statement';\n    readonly getStatementResultPath = 'get-statement-result';\n\n    private static formRequestURL(local: string): string {\n        return MAIN_REQUEST_URL + `/${local}`;\n    }\n\n    constructor(private http: HttpClient) {}\n\n    public initiateLivySession() {\n        return this.http.post(LivyService.formRequestURL(this.sessionInitiationPath), {},\n            {headers: HTTP_HEADERS});\n    }\n\n    public pollLivyTillIdle(sessionID) {\n        const body = {sessionID};\n        return this.http.post(LivyService.formRequestURL(this.sessionState), body, {headers: HTTP_HEADERS}).pipe(\n            map((state) => {\n                const value = state[`state`];\n                if (value === 'starting') {\n                    throw value;\n                }\n                return value;\n            }),\n            retryWhen(errors =>\n                errors.pipe(\n                    tap((val) => {\n                        console.log(`${val}`);  // TODO: Update state and assign value to it\n                    }), delayWhen(() => timer(500))\n                )\n            )\n        );\n    }\n\n    public pollLivyTillResult(sessionID, statementID) {\n        const body = {sessionID, statementID};\n        return this.http.post(LivyService.formRequestURL(this.getStatementResultPath), body, {headers: HTTP_HEADERS}).pipe(\n            map((state) => {\n                if (!state[`completed`]) {\n                    throw state;\n                }\n                return state;\n            }),\n            retryWhen(errors =>\n                errors.pipe(\n                    tap((value) => {\n                        // TODO: Update state and assign value to it\n                    }), delayWhen(() => timer(50))\n                )\n            )\n        );\n    }\n\n    public postStatement(sessionID: string, statement: string): any {\n        const body = {statement, sessionID};\n        return this.http.post(LivyService.formRequestURL(this.sendStatementPath), body, {headers: HTTP_HEADERS});\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    API: 'http://localhost:4000/api',\n    production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}